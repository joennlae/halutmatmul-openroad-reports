Warning: Tcl_Init() call failed - no such file or directory
1. Executing Verilog-2005 frontend: ../src/lowrisc_prim_abstract_prim_pkg_0.1/prim_pkg.sv
2. Executing Verilog-2005 frontend: ../src/lowrisc_prim_generic_and2_0/rtl/prim_generic_and2.sv
3. Executing Verilog-2005 frontend: ../src/lowrisc_prim_util_0.1/rtl/prim_util_pkg.sv
4. Executing Verilog-2005 frontend: ../src/lowrisc_prim_xilinx_and2_0/rtl/prim_xilinx_and2.sv
5. Executing Verilog-2005 frontend: ../src/lowrisc_prim_abstract_and2_0/prim_and2.sv
6. Executing Verilog-2005 frontend: ../src/lowrisc_prim_onehot_0/rtl/prim_onehot_enc.sv
7. Executing Verilog-2005 frontend: ../src/lowrisc_prim_onehot_0/rtl/prim_onehot_mux.sv
8. Executing Verilog-2005 frontend: ../src/halut_ip_halut_top_0.1/rtl/halut_pkg.sv
9. Executing Verilog-2005 frontend: ../src/halut_ip_halut_top_0.1/rtl/halut_matmul.sv
10. Executing Verilog-2005 frontend: ../src/halut_ip_halut_top_0.1/rtl/halut_decoder_x.sv
11. Executing Verilog-2005 frontend: ../src/halut_ip_halut_top_0.1/rtl/halut_encoder_4.sv
12. Executing Verilog-2005 frontend: ../src/halut_ip_halut_top_0.1/rtl/halut_decoder.sv
13. Executing Verilog-2005 frontend: ../src/halut_ip_halut_top_0.1/rtl/halut_encoder.sv
14. Executing Verilog-2005 frontend: ../src/halut_ip_halut_top_0.1/rtl/fp_16_comparision.sv
15. Executing Verilog-2005 frontend: ../src/halut_ip_halut_top_0.1/rtl/fp_defs_pkg.sv
16. Executing Verilog-2005 frontend: ../src/halut_ip_halut_top_0.1/rtl/fp_add.sv
17. Executing Verilog-2005 frontend: ../src/halut_ip_halut_top_0.1/rtl/fp_leading_one.sv
18. Executing Verilog-2005 frontend: ../src/halut_ip_halut_top_0.1/rtl/fp_norm.sv
19. Executing Verilog-2005 frontend: ../src/halut_ip_halut_top_0.1/rtl/fp_adder.sv
20. Executing Verilog-2005 frontend: ../src/halut_ip_halut_top_0.1/rtl/fp_16_to_32_convert.sv
21. Executing Verilog-2005 frontend: ../src/halut_ip_halut_top_0.1/rtl/fp_16_32_adder.sv
22. Executing Verilog-2005 frontend: ../src/halut_ip_halut_top_0.1/rtl/register_file_mem_latch.sv
23. Executing Verilog-2005 frontend: ../src/halut_ip_halut_top_0.1/rtl/prim_clock_gating.sv
24. Executing Verilog-2005 frontend: ../src/halut_ip_halut_top_0.1/rtl/scm.sv
25. Executing Liberty frontend.
26. Executing Liberty frontend.
27. Executing Liberty frontend.
28. Executing Liberty frontend.
29. Executing Liberty frontend.
30. Executing Verilog-2005 frontend: /halutmatmul/hardware/flow/OpenROAD/flow/platforms/asap7/yoSys/cells_clkgate_R.v
31. Executing SYNTH pass.
31.1. Executing HIERARCHY pass (managing design hierarchy).
31.2. Executing AST frontend in derive mode using pre-parsed AST for module `\halut_encoder_4'.
31.2.1. Analyzing design hierarchy..
31.2.2. Executing AST frontend in derive mode using pre-parsed AST for module `\halut_encoder'.
31.2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\halut_encoder'.
31.2.4. Executing AST frontend in derive mode using pre-parsed AST for module `\halut_encoder'.
31.2.5. Executing AST frontend in derive mode using pre-parsed AST for module `\halut_encoder'.
31.2.6. Analyzing design hierarchy..
31.2.7. Analyzing design hierarchy..
31.2.8. Executing AST frontend in derive mode using pre-parsed AST for module `\fp_16_comparision'.
31.2.9. Executing AST frontend in derive mode using pre-parsed AST for module `\scm'.
31.2.10. Executing AST frontend in derive mode using pre-parsed AST for module `\prim_onehot_mux'.
31.2.11. Executing AST frontend in derive mode using pre-parsed AST for module `\prim_onehot_enc'.
31.2.12. Analyzing design hierarchy..
31.2.13. Executing AST frontend in derive mode using pre-parsed AST for module `\register_file_mem_latch'.
Warning: Replacing memory \mem with list of registers. See ../src/halut_ip_halut_top_0.1/rtl/register_file_mem_latch.sv:65
31.2.14. Executing AST frontend in derive mode using pre-parsed AST for module `\prim_clock_gating'.
31.2.15. Executing AST frontend in derive mode using pre-parsed AST for module `\prim_and2'.
31.2.16. Analyzing design hierarchy..
31.2.17. Analyzing design hierarchy..
31.2.18. Executing AST frontend in derive mode using pre-parsed AST for module `\prim_generic_and2'.
31.2.19. Analyzing design hierarchy..
31.2.20. Analyzing design hierarchy..
31.3. Executing PROC pass (convert processes to netlists).
31.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
31.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
31.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
31.3.4. Executing PROC_INIT pass (extract init attributes).
31.3.5. Executing PROC_ARST pass (detect async resets in processes).
31.3.6. Executing PROC_ROM pass (convert switches to ROMs).
31.3.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
31.3.8. Executing PROC_DLATCH pass (convert process syncs to latches).
31.3.9. Executing PROC_DFF pass (convert process syncs to FFs).
31.3.10. Executing PROC_MEMWR pass (convert process memory writes to cells).
31.3.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
31.3.12. Executing OPT_EXPR pass (perform const folding).
31.4. Executing OPT_EXPR pass (perform const folding).
31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
31.6. Executing CHECK pass (checking for obvious problems).
31.7. Executing OPT pass (performing simple optimizations).
31.7.1. Executing OPT_EXPR pass (perform const folding).
31.7.2. Executing OPT_MERGE pass (detect identical cells).
31.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
31.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
31.7.5. Executing OPT_MERGE pass (detect identical cells).
31.7.6. Executing OPT_DFF pass (perform DFF optimizations).
31.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
31.7.8. Executing OPT_EXPR pass (perform const folding).
31.7.9. Rerunning OPT passes. (Maybe there is more to do..)
31.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
31.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
31.7.12. Executing OPT_MERGE pass (detect identical cells).
31.7.13. Executing OPT_DFF pass (perform DFF optimizations).
31.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
31.7.15. Executing OPT_EXPR pass (perform const folding).
31.7.16. Finished OPT passes. (There is nothing left to do.)
31.8. Executing FSM pass (extract and optimize FSM).
31.8.1. Executing FSM_DETECT pass (finding FSMs in design).
31.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).
31.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).
31.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
31.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).
31.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
31.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).
31.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
31.9. Executing OPT pass (performing simple optimizations).
31.9.1. Executing OPT_EXPR pass (perform const folding).
31.9.2. Executing OPT_MERGE pass (detect identical cells).
31.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
31.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
31.9.5. Executing OPT_MERGE pass (detect identical cells).
31.9.6. Executing OPT_DFF pass (perform DFF optimizations).
31.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
31.9.8. Executing OPT_EXPR pass (perform const folding).
31.9.9. Rerunning OPT passes. (Maybe there is more to do..)
31.9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
31.9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
31.9.12. Executing OPT_MERGE pass (detect identical cells).
31.9.13. Executing OPT_DFF pass (perform DFF optimizations).
31.9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
31.9.15. Executing OPT_EXPR pass (perform const folding).
31.9.16. Rerunning OPT passes. (Maybe there is more to do..)
31.9.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
31.9.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
31.9.19. Executing OPT_MERGE pass (detect identical cells).
31.9.20. Executing OPT_DFF pass (perform DFF optimizations).
31.9.21. Executing OPT_CLEAN pass (remove unused cells and wires).
31.9.22. Executing OPT_EXPR pass (perform const folding).
31.9.23. Finished OPT passes. (There is nothing left to do.)
31.10. Executing WREDUCE pass (reducing word size of cells).
31.11. Executing PEEPOPT pass (run peephole optimizers).
31.12. Executing OPT_CLEAN pass (remove unused cells and wires).
31.13. Executing ALUMACC pass (create $alu and $macc cells).
31.14. Executing SHARE pass (SAT-based resource sharing).
31.15. Executing OPT pass (performing simple optimizations).
31.15.1. Executing OPT_EXPR pass (perform const folding).
31.15.2. Executing OPT_MERGE pass (detect identical cells).
31.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
31.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
31.15.5. Executing OPT_MERGE pass (detect identical cells).
31.15.6. Executing OPT_DFF pass (perform DFF optimizations).
31.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
31.15.8. Executing OPT_EXPR pass (perform const folding).
31.15.9. Rerunning OPT passes. (Maybe there is more to do..)
31.15.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
31.15.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
31.15.12. Executing OPT_MERGE pass (detect identical cells).
31.15.13. Executing OPT_DFF pass (perform DFF optimizations).
31.15.14. Executing OPT_CLEAN pass (remove unused cells and wires).
31.15.15. Executing OPT_EXPR pass (perform const folding).
31.15.16. Finished OPT passes. (There is nothing left to do.)
31.16. Executing MEMORY pass.
31.16.1. Executing OPT_MEM pass (optimize memories).
31.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
31.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
31.16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).
31.16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
31.16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
31.16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
31.16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
31.16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
31.16.10. Executing MEMORY_COLLECT pass (generating $mem cells).
31.17. Executing OPT_CLEAN pass (remove unused cells and wires).
31.18. Executing OPT pass (performing simple optimizations).
31.18.1. Executing OPT_EXPR pass (perform const folding).
31.18.2. Executing OPT_MERGE pass (detect identical cells).
31.18.3. Executing OPT_DFF pass (perform DFF optimizations).
31.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
31.18.5. Rerunning OPT passes. (Removed registers in this run.)
31.18.6. Executing OPT_EXPR pass (perform const folding).
31.18.7. Executing OPT_MERGE pass (detect identical cells).
31.18.8. Executing OPT_DFF pass (perform DFF optimizations).
31.18.9. Executing OPT_CLEAN pass (remove unused cells and wires).
31.18.10. Finished fast OPT passes.
31.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
31.20. Executing OPT pass (performing simple optimizations).
31.20.1. Executing OPT_EXPR pass (perform const folding).
31.20.2. Executing OPT_MERGE pass (detect identical cells).
31.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
31.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
31.20.5. Executing OPT_MERGE pass (detect identical cells).
31.20.6. Executing OPT_SHARE pass.
31.20.7. Executing OPT_DFF pass (perform DFF optimizations).
31.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
31.20.9. Executing OPT_EXPR pass (perform const folding).
31.20.10. Rerunning OPT passes. (Maybe there is more to do..)
31.20.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
31.20.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
31.20.13. Executing OPT_MERGE pass (detect identical cells).
31.20.14. Executing OPT_SHARE pass.
31.20.15. Executing OPT_DFF pass (perform DFF optimizations).
31.20.16. Executing OPT_CLEAN pass (remove unused cells and wires).
31.20.17. Executing OPT_EXPR pass (perform const folding).
31.20.18. Rerunning OPT passes. (Maybe there is more to do..)
31.20.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
31.20.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
31.20.21. Executing OPT_MERGE pass (detect identical cells).
31.20.22. Executing OPT_SHARE pass.
31.20.23. Executing OPT_DFF pass (perform DFF optimizations).
31.20.24. Executing OPT_CLEAN pass (remove unused cells and wires).
31.20.25. Executing OPT_EXPR pass (perform const folding).
31.20.26. Finished OPT passes. (There is nothing left to do.)
31.21. Executing TECHMAP pass (map to technology primitives).
31.21.1. Executing Verilog-2005 frontend: /venv2/bin/../share/yosys/techmap.v
31.21.2. Continuing TECHMAP pass.
31.22. Executing OPT pass (performing simple optimizations).
31.22.1. Executing OPT_EXPR pass (perform const folding).
31.22.2. Executing OPT_MERGE pass (detect identical cells).
31.22.3. Executing OPT_DFF pass (perform DFF optimizations).
31.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
31.22.5. Finished fast OPT passes.
31.23. Executing ABC pass (technology mapping using ABC).
31.23.1. Extracting gate netlist of module `$paramod$073bb16c7b9fea55850bd3525567a05530c8101a\scm' to `<abc-temp-dir>/input.blif'..
31.23.2. Extracting gate netlist of module `$paramod$207a91e21b0b0be728ff71edb6ac89efee3cef0e\halut_encoder' to `<abc-temp-dir>/input.blif'..
31.23.3. Extracting gate netlist of module `$paramod$95cd7898c700ea48bfe4c5087e7da433eec69b88\halut_encoder' to `<abc-temp-dir>/input.blif'..
31.23.4. Extracting gate netlist of module `$paramod$a9e18a0bf14479fd5c6f4dda62263afd12b51243\halut_encoder' to `<abc-temp-dir>/input.blif'..
31.23.5. Extracting gate netlist of module `$paramod$bdd7c6a85ae3fbbed4c470a0e1daa8721a5e0d37\halut_encoder' to `<abc-temp-dir>/input.blif'..
31.23.6. Extracting gate netlist of module `$paramod$d7e0f0371c821888b223279e0c81e33e591c5555\register_file_mem_latch' to `<abc-temp-dir>/input.blif'..
31.23.7. Extracting gate netlist of module `$paramod$e14bb7955ef84afa87d66b6822ffd16060dd5231\prim_onehot_mux' to `<abc-temp-dir>/input.blif'..
31.23.8. Extracting gate netlist of module `$paramod\prim_and2\Width=s32'00000000000000000000000000000100' to `<abc-temp-dir>/input.blif'..
31.23.9. Extracting gate netlist of module `$paramod\prim_generic_and2\Width=s32'00000000000000000000000000000100' to `<abc-temp-dir>/input.blif'..
31.23.10. Extracting gate netlist of module `$paramod\prim_onehot_enc\OneHotWidth=32'00000000000000000000000000000100' to `<abc-temp-dir>/input.blif'..
31.23.11. Extracting gate netlist of module `\fp_16_comparision' to `<abc-temp-dir>/input.blif'..
31.23.12. Extracting gate netlist of module `\halut_encoder_4' to `<abc-temp-dir>/input.blif'..
31.23.13. Extracting gate netlist of module `\prim_clock_gating' to `<abc-temp-dir>/input.blif'..
31.24. Executing OPT pass (performing simple optimizations).
31.24.1. Executing OPT_EXPR pass (perform const folding).
31.24.2. Executing OPT_MERGE pass (detect identical cells).
31.24.3. Executing OPT_DFF pass (perform DFF optimizations).
31.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
31.24.5. Rerunning OPT passes. (Removed registers in this run.)
31.24.6. Executing OPT_EXPR pass (perform const folding).
31.24.7. Executing OPT_MERGE pass (detect identical cells).
31.24.8. Executing OPT_DFF pass (perform DFF optimizations).
31.24.9. Executing OPT_CLEAN pass (remove unused cells and wires).
31.24.10. Finished fast OPT passes.
31.25. Executing HIERARCHY pass (managing design hierarchy).
31.25.1. Analyzing design hierarchy..
31.25.2. Analyzing design hierarchy..
31.26. Printing statistics.
31.27. Executing CHECK pass (checking for obvious problems).
32. Executing TECHMAP pass (map to technology primitives).
32.1. Executing Verilog-2005 frontend: /venv2/bin/../share/yosys/techmap.v
32.2. Continuing TECHMAP pass.
33. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
Warning: Found unsupported expression 'D*!SE+!D*!SI+SE*!SI' in pin attribute of cell 'SDFLx1_ASAP7_75t_R' - skipping.
Warning: Found unsupported expression 'D*!SE+!D*!SI+SE*!SI' in pin attribute of cell 'SDFLx2_ASAP7_75t_R' - skipping.
Warning: Found unsupported expression 'D*!SE+!D*!SI+SE*!SI' in pin attribute of cell 'SDFLx3_ASAP7_75t_R' - skipping.
Warning: Found unsupported expression 'D*!SE+!D*!SI+SE*!SI' in pin attribute of cell 'SDFLx4_ASAP7_75t_R' - skipping.
Warning: Found unsupported expression 'D*!SE+!D*!SI+SE*!SI' in pin attribute of cell 'SDFHx1_ASAP7_75t_R' - skipping.
Warning: Found unsupported expression 'D*!SE+!D*!SI+SE*!SI' in pin attribute of cell 'SDFHx2_ASAP7_75t_R' - skipping.
Warning: Found unsupported expression 'D*!SE+!D*!SI+SE*!SI' in pin attribute of cell 'SDFHx3_ASAP7_75t_R' - skipping.
Warning: Found unsupported expression 'D*!SE+!D*!SI+SE*!SI' in pin attribute of cell 'SDFHx4_ASAP7_75t_R' - skipping.
33.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
34. Executing ABC pass (technology mapping using ABC).
34.1. Extracting gate netlist of module `$paramod$073bb16c7b9fea55850bd3525567a05530c8101a\scm' to `<abc-temp-dir>/input.blif'..
34.1.1. Executing ABC.
34.1.2. Re-integrating ABC results.
34.2. Extracting gate netlist of module `$paramod$207a91e21b0b0be728ff71edb6ac89efee3cef0e\halut_encoder' to `<abc-temp-dir>/input.blif'..
34.2.1. Executing ABC.
34.2.2. Re-integrating ABC results.
34.3. Extracting gate netlist of module `$paramod$95cd7898c700ea48bfe4c5087e7da433eec69b88\halut_encoder' to `<abc-temp-dir>/input.blif'..
34.3.1. Executing ABC.
34.3.2. Re-integrating ABC results.
34.4. Extracting gate netlist of module `$paramod$a9e18a0bf14479fd5c6f4dda62263afd12b51243\halut_encoder' to `<abc-temp-dir>/input.blif'..
34.4.1. Executing ABC.
34.4.2. Re-integrating ABC results.
34.5. Extracting gate netlist of module `$paramod$bdd7c6a85ae3fbbed4c470a0e1daa8721a5e0d37\halut_encoder' to `<abc-temp-dir>/input.blif'..
34.5.1. Executing ABC.
34.5.2. Re-integrating ABC results.
34.6. Extracting gate netlist of module `$paramod$d7e0f0371c821888b223279e0c81e33e591c5555\register_file_mem_latch' to `<abc-temp-dir>/input.blif'..
34.6.1. Executing ABC.
34.6.2. Re-integrating ABC results.
34.7. Extracting gate netlist of module `$paramod$e14bb7955ef84afa87d66b6822ffd16060dd5231\prim_onehot_mux' to `<abc-temp-dir>/input.blif'..
34.7.1. Executing ABC.
34.7.2. Re-integrating ABC results.
34.8. Extracting gate netlist of module `$paramod\prim_and2\Width=s32'00000000000000000000000000000100' to `<abc-temp-dir>/input.blif'..
34.9. Extracting gate netlist of module `$paramod\prim_generic_and2\Width=s32'00000000000000000000000000000100' to `<abc-temp-dir>/input.blif'..
34.9.1. Executing ABC.
34.9.2. Re-integrating ABC results.
34.10. Extracting gate netlist of module `$paramod\prim_onehot_enc\OneHotWidth=32'00000000000000000000000000000100' to `<abc-temp-dir>/input.blif'..
34.10.1. Executing ABC.
34.10.2. Re-integrating ABC results.
34.11. Extracting gate netlist of module `\fp_16_comparision' to `<abc-temp-dir>/input.blif'..
34.11.1. Executing ABC.
34.11.2. Re-integrating ABC results.
34.12. Extracting gate netlist of module `\halut_encoder_4' to `<abc-temp-dir>/input.blif'..
34.12.1. Executing ABC.
34.12.2. Re-integrating ABC results.
34.13. Extracting gate netlist of module `\prim_clock_gating' to `<abc-temp-dir>/input.blif'..
34.13.1. Executing ABC.
34.13.2. Re-integrating ABC results.
35. Printing statistics.
Ungroup modules of size 100
36. Executing HIERARCHY pass (managing design hierarchy).
36.1. Analyzing design hierarchy..
36.2. Analyzing design hierarchy..
Found module halut_encoder_4
Found module $paramod$207a91e21b0b0be728ff71edb6ac89efee3cef0e\halut_encoder
Found module $paramod$073bb16c7b9fea55850bd3525567a05530c8101a\scm
Found module $paramod$d7e0f0371c821888b223279e0c81e33e591c5555\register_file_mem_latch
Found module prim_clock_gating
Found module $paramod$e14bb7955ef84afa87d66b6822ffd16060dd5231\prim_onehot_mux
Found module $paramod\prim_and2\Width=s32'00000000000000000000000000000100
Found module $paramod\prim_generic_and2\Width=s32'00000000000000000000000000000100
Found module $paramod\prim_onehot_enc\OneHotWidth=32'00000000000000000000000000000100
Found module prim_clock_gating
Found module $paramod$e14bb7955ef84afa87d66b6822ffd16060dd5231\prim_onehot_mux
Found module $paramod\prim_and2\Width=s32'00000000000000000000000000000100
Found module $paramod\prim_generic_and2\Width=s32'00000000000000000000000000000100
Found module $paramod\prim_onehot_enc\OneHotWidth=32'00000000000000000000000000000100
Found module fp_16_comparision
Found module $paramod$95cd7898c700ea48bfe4c5087e7da433eec69b88\halut_encoder
Found module $paramod$073bb16c7b9fea55850bd3525567a05530c8101a\scm
Found module $paramod$d7e0f0371c821888b223279e0c81e33e591c5555\register_file_mem_latch
Found module prim_clock_gating
Found module $paramod$e14bb7955ef84afa87d66b6822ffd16060dd5231\prim_onehot_mux
Found module $paramod\prim_and2\Width=s32'00000000000000000000000000000100
Found module $paramod\prim_generic_and2\Width=s32'00000000000000000000000000000100
Found module $paramod\prim_onehot_enc\OneHotWidth=32'00000000000000000000000000000100
Found module prim_clock_gating
Found module $paramod$e14bb7955ef84afa87d66b6822ffd16060dd5231\prim_onehot_mux
Found module $paramod\prim_and2\Width=s32'00000000000000000000000000000100
Found module $paramod\prim_generic_and2\Width=s32'00000000000000000000000000000100
Found module $paramod\prim_onehot_enc\OneHotWidth=32'00000000000000000000000000000100
Found module fp_16_comparision
Found module $paramod$a9e18a0bf14479fd5c6f4dda62263afd12b51243\halut_encoder
Found module $paramod$073bb16c7b9fea55850bd3525567a05530c8101a\scm
Found module $paramod$d7e0f0371c821888b223279e0c81e33e591c5555\register_file_mem_latch
Found module prim_clock_gating
Found module $paramod$e14bb7955ef84afa87d66b6822ffd16060dd5231\prim_onehot_mux
Found module $paramod\prim_and2\Width=s32'00000000000000000000000000000100
Found module $paramod\prim_generic_and2\Width=s32'00000000000000000000000000000100
Found module $paramod\prim_onehot_enc\OneHotWidth=32'00000000000000000000000000000100
Found module prim_clock_gating
Found module $paramod$e14bb7955ef84afa87d66b6822ffd16060dd5231\prim_onehot_mux
Found module $paramod\prim_and2\Width=s32'00000000000000000000000000000100
Found module $paramod\prim_generic_and2\Width=s32'00000000000000000000000000000100
Found module $paramod\prim_onehot_enc\OneHotWidth=32'00000000000000000000000000000100
Found module fp_16_comparision
Found module $paramod$bdd7c6a85ae3fbbed4c470a0e1daa8721a5e0d37\halut_encoder
Found module $paramod$073bb16c7b9fea55850bd3525567a05530c8101a\scm
Found module $paramod$d7e0f0371c821888b223279e0c81e33e591c5555\register_file_mem_latch
Found module prim_clock_gating
Found module $paramod$e14bb7955ef84afa87d66b6822ffd16060dd5231\prim_onehot_mux
Found module $paramod\prim_and2\Width=s32'00000000000000000000000000000100
Found module $paramod\prim_generic_and2\Width=s32'00000000000000000000000000000100
Found module $paramod\prim_onehot_enc\OneHotWidth=32'00000000000000000000000000000100
Found module prim_clock_gating
Found module $paramod$e14bb7955ef84afa87d66b6822ffd16060dd5231\prim_onehot_mux
Found module $paramod\prim_and2\Width=s32'00000000000000000000000000000100
Found module $paramod\prim_generic_and2\Width=s32'00000000000000000000000000000100
Found module $paramod\prim_onehot_enc\OneHotWidth=32'00000000000000000000000000000100
Found module fp_16_comparision
37. Printing statistics.
Area of module \halut_encoder_4 is 1264.188060
Preserving hierarchical module: \halut_encoder_4
38. Printing statistics.
Area of module $paramod$207a91e21b0b0be728ff71edb6ac89efee3cef0e\halut_encoder is 312.755580
Preserving hierarchical module: $paramod$207a91e21b0b0be728ff71edb6ac89efee3cef0e\halut_encoder
39. Printing statistics.
Area of module $paramod$073bb16c7b9fea55850bd3525567a05530c8101a\scm is 255.208320
Preserving hierarchical module: $paramod$073bb16c7b9fea55850bd3525567a05530c8101a\scm
40. Printing statistics.
Area of module $paramod$d7e0f0371c821888b223279e0c81e33e591c5555\register_file_mem_latch is 58.217940
41. Printing statistics.
Area of module \prim_clock_gating is 0.262440
42. Printing statistics.
Area of module $paramod$e14bb7955ef84afa87d66b6822ffd16060dd5231\prim_onehot_mux is 10.964160
43. Printing statistics.
Area of module $paramod\prim_and2\Width=s32'00000000000000000000000000000100 is 0.583200
44. Printing statistics.
Area of module $paramod\prim_generic_and2\Width=s32'00000000000000000000000000000100 is 0.583200
45. Printing statistics.
Area of module $paramod\prim_onehot_enc\OneHotWidth=32'00000000000000000000000000000100 is 0.510300
46. Printing statistics.
Area of module \prim_clock_gating is 0.262440
47. Printing statistics.
Area of module $paramod$e14bb7955ef84afa87d66b6822ffd16060dd5231\prim_onehot_mux is 10.964160
48. Printing statistics.
Area of module $paramod\prim_and2\Width=s32'00000000000000000000000000000100 is 0.583200
49. Printing statistics.
Area of module $paramod\prim_generic_and2\Width=s32'00000000000000000000000000000100 is 0.583200
50. Printing statistics.
Area of module $paramod\prim_onehot_enc\OneHotWidth=32'00000000000000000000000000000100 is 0.510300
51. Printing statistics.
Area of module \fp_16_comparision is 5.992380
52. Printing statistics.
Area of module $paramod$95cd7898c700ea48bfe4c5087e7da433eec69b88\halut_encoder is 312.755580
Preserving hierarchical module: $paramod$95cd7898c700ea48bfe4c5087e7da433eec69b88\halut_encoder
53. Printing statistics.
Area of module $paramod$073bb16c7b9fea55850bd3525567a05530c8101a\scm is 255.208320
Preserving hierarchical module: $paramod$073bb16c7b9fea55850bd3525567a05530c8101a\scm
54. Printing statistics.
Area of module $paramod$d7e0f0371c821888b223279e0c81e33e591c5555\register_file_mem_latch is 58.217940
55. Printing statistics.
Area of module \prim_clock_gating is 0.262440
56. Printing statistics.
Area of module $paramod$e14bb7955ef84afa87d66b6822ffd16060dd5231\prim_onehot_mux is 10.964160
57. Printing statistics.
Area of module $paramod\prim_and2\Width=s32'00000000000000000000000000000100 is 0.583200
58. Printing statistics.
Area of module $paramod\prim_generic_and2\Width=s32'00000000000000000000000000000100 is 0.583200
59. Printing statistics.
Area of module $paramod\prim_onehot_enc\OneHotWidth=32'00000000000000000000000000000100 is 0.510300
60. Printing statistics.
Area of module \prim_clock_gating is 0.262440
61. Printing statistics.
Area of module $paramod$e14bb7955ef84afa87d66b6822ffd16060dd5231\prim_onehot_mux is 10.964160
62. Printing statistics.
Area of module $paramod\prim_and2\Width=s32'00000000000000000000000000000100 is 0.583200
63. Printing statistics.
Area of module $paramod\prim_generic_and2\Width=s32'00000000000000000000000000000100 is 0.583200
64. Printing statistics.
Area of module $paramod\prim_onehot_enc\OneHotWidth=32'00000000000000000000000000000100 is 0.510300
65. Printing statistics.
Area of module \fp_16_comparision is 5.992380
66. Printing statistics.
Area of module $paramod$a9e18a0bf14479fd5c6f4dda62263afd12b51243\halut_encoder is 312.755580
Preserving hierarchical module: $paramod$a9e18a0bf14479fd5c6f4dda62263afd12b51243\halut_encoder
67. Printing statistics.
Area of module $paramod$073bb16c7b9fea55850bd3525567a05530c8101a\scm is 255.208320
Preserving hierarchical module: $paramod$073bb16c7b9fea55850bd3525567a05530c8101a\scm
68. Printing statistics.
Area of module $paramod$d7e0f0371c821888b223279e0c81e33e591c5555\register_file_mem_latch is 58.217940
69. Printing statistics.
Area of module \prim_clock_gating is 0.262440
70. Printing statistics.
Area of module $paramod$e14bb7955ef84afa87d66b6822ffd16060dd5231\prim_onehot_mux is 10.964160
71. Printing statistics.
Area of module $paramod\prim_and2\Width=s32'00000000000000000000000000000100 is 0.583200
72. Printing statistics.
Area of module $paramod\prim_generic_and2\Width=s32'00000000000000000000000000000100 is 0.583200
73. Printing statistics.
Area of module $paramod\prim_onehot_enc\OneHotWidth=32'00000000000000000000000000000100 is 0.510300
74. Printing statistics.
Area of module \prim_clock_gating is 0.262440
75. Printing statistics.
Area of module $paramod$e14bb7955ef84afa87d66b6822ffd16060dd5231\prim_onehot_mux is 10.964160
76. Printing statistics.
Area of module $paramod\prim_and2\Width=s32'00000000000000000000000000000100 is 0.583200
77. Printing statistics.
Area of module $paramod\prim_generic_and2\Width=s32'00000000000000000000000000000100 is 0.583200
78. Printing statistics.
Area of module $paramod\prim_onehot_enc\OneHotWidth=32'00000000000000000000000000000100 is 0.510300
79. Printing statistics.
Area of module \fp_16_comparision is 5.992380
80. Printing statistics.
Area of module $paramod$bdd7c6a85ae3fbbed4c470a0e1daa8721a5e0d37\halut_encoder is 312.245280
Preserving hierarchical module: $paramod$bdd7c6a85ae3fbbed4c470a0e1daa8721a5e0d37\halut_encoder
81. Printing statistics.
Area of module $paramod$073bb16c7b9fea55850bd3525567a05530c8101a\scm is 255.208320
Preserving hierarchical module: $paramod$073bb16c7b9fea55850bd3525567a05530c8101a\scm
82. Printing statistics.
Area of module $paramod$d7e0f0371c821888b223279e0c81e33e591c5555\register_file_mem_latch is 58.217940
83. Printing statistics.
Area of module \prim_clock_gating is 0.262440
84. Printing statistics.
Area of module $paramod$e14bb7955ef84afa87d66b6822ffd16060dd5231\prim_onehot_mux is 10.964160
85. Printing statistics.
Area of module $paramod\prim_and2\Width=s32'00000000000000000000000000000100 is 0.583200
86. Printing statistics.
Area of module $paramod\prim_generic_and2\Width=s32'00000000000000000000000000000100 is 0.583200
87. Printing statistics.
Area of module $paramod\prim_onehot_enc\OneHotWidth=32'00000000000000000000000000000100 is 0.510300
88. Printing statistics.
Area of module \prim_clock_gating is 0.262440
89. Printing statistics.
Area of module $paramod$e14bb7955ef84afa87d66b6822ffd16060dd5231\prim_onehot_mux is 10.964160
90. Printing statistics.
Area of module $paramod\prim_and2\Width=s32'00000000000000000000000000000100 is 0.583200
91. Printing statistics.
Area of module $paramod\prim_generic_and2\Width=s32'00000000000000000000000000000100 is 0.583200
92. Printing statistics.
Area of module $paramod\prim_onehot_enc\OneHotWidth=32'00000000000000000000000000000100 is 0.510300
93. Printing statistics.
Area of module \fp_16_comparision is 5.992380
Warnings: 10 unique messages, 74 total
End of script. Logfile hash: d0c048c995, CPU: user 65.10s system 0.54s, MEM: 79.27 MB peak
Yosys 0.21+10 (git sha1 a21745052, x86_64-conda-linux-gnu-cc 11.2.0 -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -fdebug-prefix-map=/home/runner/work/conda-eda/conda-eda/workdir/conda-env/conda-bld/yosys_1663196759742/work=/usr/local/src/conda/yosys-0.21_11_ga21745052 -fdebug-prefix-map=/venv=/usr/local/src/conda-prefix -fPIC -Os -fno-merge-constants)
Time spent: 86% 59x stat (62 sec), 9% 2x abc (6 sec), ...
Elapsed time: 1:12.55[h:]min:sec. CPU time: user 71.39 sys 1.06 (99%). Peak memory: 91304KB.
